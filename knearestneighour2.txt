from math import sqrt 
import matplotlib.pyplot as plt
from matplotlib.pyplot as plt
from collections import Counter
import numpy as np

data ={'q':[[2,1],[3,2],[1,3],r:[5,6],[6,6],[6,8]]}
feature =[7,5]

for i in dataset:
	for ii in dataset[i]:
		[plt.scatter(ii[0],ii[1], s=50, color=i)]

def KNN(dataset,newfeature,k=3):
  if len(data) >= k:
		waring.warn('k is than the number of classes')

	distance = []
	for group in data:
		for features in data[group]:
			euclidean_distance = np.sqrt(np.sum((np.array(features)-np.array(predict))**2))
			distances.append([euclidean_distance,group])
	count =[i[1] for i in sorted(distance,group)]
	count_result = Counter(votes).most_common(1)[0][0]
	return count_result
result= NN(data,feature,k=3)
print(result)

